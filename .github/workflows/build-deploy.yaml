name: Build & Deploy Next.js App

on:
  push:
    branches: ['deploy']
  pull_request:
    branches: ['deploy']

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Yarn
        run: |
          npm install -g yarn  # yarn을 글로벌로 설치

      - name: Install dependencies
        working-directory: Web/webapp
        run: |
          echo "[INSTALL] 의존성 설치 시작"
          yarn install

      - name: Set environment variables
        working-directory: Web/webapp
        run: |
          echo "NEXT_PUBLIC_SPORTS_API_KEY=202f212e49d55e7bc005f7225c10cfec" >> .env
          echo "NEXT_PUBLIC_BACKEND_ENDPOINT=" >> .env
          echo "PORT=3000" >> .env
          echo "NODE_ENV=development" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Build and Push Docker image
        working-directory: Web/webapp
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest


  deploy:
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Set AWS credentials as App Settings
      #   uses: azure/appservice-settings@v1
      #   with:
      #     app-name: app-service-webapp
      #     resource-group-name: rg-webapp
      #     slot-name: production
      #     app-settings-json: >
      #       [
      #         { "name": "AWS_ACCESS_KEY_ID", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}", "slotSetting": false },
      #         { "name": "AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}", "slotSetting": false },
      #         { "name": "AWS_REGION", "value": "ap-northeast-2", "slotSetting": false }
      #       ]

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3  # AWS도 문제 없이 사용 가능
        with:
          version: v1.28.0

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name my-eks --region ap-northeast-2

      - name: Apply Kubernetes Manifests
        run: |
          cd Terraform/k8s
          kubectl apply -f .




      #Azure App Service 배포
      # - name: Deploy to Azure Web App Staging Slot
      #   uses: azure/webapps-deploy@v3
      #   with:
      #     app-name: app-service-webapp
      #     resource-group-name: rg-webapp
      #     images: ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest
      #     slot-name: production     # Green 환경 (새로운 버전 배포)

      # - name: Swap Slots (staging → production)
      #   uses: azure/cli@v1
      #   with:
      #     azcliversion: latest
      #     inlineScript: az webapp deployment slot swap --name app-service-webapp --resource-group rg-webapp --slot staging --target-slot production


#  Code Deploy 방식 - [이전 방식]
#     - name: Build
#       working-directory: Web/webapp
#       run: |
#         echo "[BUILD] Next.js 빌드 시작"
#         sleep 30
#         yarn build

#     - name: Change scripts permissions
#       working-directory: Web/webapp
#       run: chmod +x scripts/*.sh

#     - name: Prepare deploy-output directory
#       working-directory: Web/webapp
#       run: |
#         mkdir -p deploy-output
#         cp -r .next deploy-output/
#         cp -r public deploy-output/
#         cp package.json deploy-output/
#         cp yarn.lock deploy-output/
#         cp next.config.mjs deploy-output/
#         cp -r scripts deploy-output/
#         cp appspec.yml deploy-output/

#     - name: Archive build artifacts
#       working-directory: Web/webapp/deploy-output
#       run: zip -r $GITHUB_WORKSPACE/deploy-output.zip .

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: deploy-output
#         path: Web/webapp/deploy-output/

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     - name: Upload to S3
#       run: aws s3 cp deploy-output.zip s3://webdeploy-artifact-bucket/webapp-pipeline/deploy-output.zip --region ap-northeast-2

# deploy:
#   runs-on: ubuntu-22.04
#   needs: build # build가 끝난 뒤에만 실행됨

#   steps:
#     - name: Checkout source
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     - name: Deploy with CodeDeploy
#       run: |
#         aws deploy create-deployment \
#           --application-name web-server \
#           --deployment-group-name webapp-deployment-group \
#           --s3-location bucket=webdeploy-artifact-bucket,key=webapp-pipeline/deploy-output.zip,bundleType=zip \
#           --deployment-config-name CodeDeployDefault.AllAtOnce \
#           --region ap-northeast-2

#싱가포르 배포
# - name: Configure AWS credentials
#   uses: aws-actions/configure-aws-credentials@v4
#   with:
#     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     aws-region: ap-southeast-1

# - name: Deploy with CodeDeploy
#   run: |
#     aws deploy create-deployment \
#       --application-name sin-web-server \
#       --deployment-group-name sin-webapp-deployment-group \
#       --s3-location bucket=sin-webdeploy-artifact-bucket,key=webapp-pipeline/deploy-output.zip,bundleType=zip \
#       --deployment-config-name CodeDeployDefault.AllAtOnce \
#       --region ap-southeast-1

