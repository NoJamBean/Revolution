name: Build & Deploy Next.js App

on:
  push:
    branches: ['deploy']
  pull_request:
    branches: ['deploy']

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: Web/webapp
        run: |
          echo "[INSTALL] 의존성 설치 시작"
          yarn install

      - name: Set environment variables
        working-directory: Web/webapp
        run: |
          echo "NEXT_PUBLIC_SPORTS_API_KEY=202f212e49d55e7bc005f7225c10cfec" >> .env
          echo "NEXT_PUBLIC_BACKEND_ENDPOINT=https://app-service-webapp.azurewebsites.net" >> .env
          echo "PORT=3000" >> .env
          echo "NODE_ENV=development" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

            # 5. Docker 설치 및 설정
      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release \
            ruby \
            wget \
            nginx
          
          # Docker 공식 GPG 키 등록
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
            sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg

          # Docker 저장소 추가
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
            https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Docker Compose 플러그인 설치
          sudo mkdir -p /home/ubuntu/.docker/cli-plugins/
          curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
            -o /home/ubuntu/.docker/cli-plugins/docker-compose
          sudo chmod +x /home/ubuntu/.docker/cli-plugins/docker-compose
          sudo chown -R ubuntu:ubuntu /home/ubuntu/.docker

          # Docker 서비스 시작
          sudo systemctl enable docker
          sudo systemctl start docker

      # 6. CodeDeploy Agent 설치
      - name: Install CodeDeploy Agent
        run: |
          cd /home/ubuntu
          wget https://aws-codedeploy-ap-northeast-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          sudo systemctl start codedeploy-agent
          sudo systemctl enable codedeploy-agent

      # 7. Nginx 설정
      - name: Install and Configure Nginx
        run: |
          sudo apt install -y nginx
          sudo systemctl enable nginx
          sudo systemctl start nginx
          
          sudo tee /etc/nginx/conf.d/webserver.conf > /dev/null <<EOL
          server {
              listen 80;
              server_name www.1bean.shop;

              location = /api/log {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }

              location /api/ {
                  proxy_pass http://alb.backend.internal/api/;
                  proxy_set_header Host alb.backend.internal;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }

              location /ws/ {
                  proxy_pass http://alb.backend.internal/ws/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host alb.backend.internal;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }

              location = /ws {
                  proxy_pass http://alb.backend.internal/ws;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host alb.backend.internal;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOL

          sudo systemctl restart nginx



      - name: Build and Push Docker image
        working-directory: Web/webapp
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest


  deploy:
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Azure Web App Staging Slot
        uses: azure/webapps-deploy@v2
        with:
          app-name: app-service-webapp
          resource-group-name: rg-webapp
          images: ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest
          slot-name: staging     # Green 환경 (새로운 버전 배포)
          # publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}  # GitHub Secrets에서 배포 프로필을 사용
          

      # - name: Swap Slots (Blue -> Green)
      #   uses: azure/webapps-swap-slot@v2
      #   with:
      #     app-name: app-service-webapp
      #     resource-group-name: rg-webapp
      #     slot-name: app-service-webapp  # Green (staging) 슬롯을 기존 production 슬롯으로 전환
      #     target-slot: production  # 기존 production 슬롯을 타겟 슬롯으로 설정


#  Code Deploy 방식 - [이전 방식]
#     - name: Build
#       working-directory: Web/webapp
#       run: |
#         echo "[BUILD] Next.js 빌드 시작"
#         sleep 30
#         yarn build

#     - name: Change scripts permissions
#       working-directory: Web/webapp
#       run: chmod +x scripts/*.sh

#     - name: Prepare deploy-output directory
#       working-directory: Web/webapp
#       run: |
#         mkdir -p deploy-output
#         cp -r .next deploy-output/
#         cp -r public deploy-output/
#         cp package.json deploy-output/
#         cp yarn.lock deploy-output/
#         cp next.config.mjs deploy-output/
#         cp -r scripts deploy-output/
#         cp appspec.yml deploy-output/

#     - name: Archive build artifacts
#       working-directory: Web/webapp/deploy-output
#       run: zip -r $GITHUB_WORKSPACE/deploy-output.zip .

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: deploy-output
#         path: Web/webapp/deploy-output/

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     - name: Upload to S3
#       run: aws s3 cp deploy-output.zip s3://webdeploy-artifact-bucket/webapp-pipeline/deploy-output.zip --region ap-northeast-2

# deploy:
#   runs-on: ubuntu-22.04
#   needs: build # build가 끝난 뒤에만 실행됨

#   steps:
#     - name: Checkout source
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     - name: Deploy with CodeDeploy
#       run: |
#         aws deploy create-deployment \
#           --application-name web-server \
#           --deployment-group-name webapp-deployment-group \
#           --s3-location bucket=webdeploy-artifact-bucket,key=webapp-pipeline/deploy-output.zip,bundleType=zip \
#           --deployment-config-name CodeDeployDefault.AllAtOnce \
#           --region ap-northeast-2

#싱가포르 배포
# - name: Configure AWS credentials
#   uses: aws-actions/configure-aws-credentials@v4
#   with:
#     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     aws-region: ap-southeast-1

# - name: Deploy with CodeDeploy
#   run: |
#     aws deploy create-deployment \
#       --application-name sin-web-server \
#       --deployment-group-name sin-webapp-deployment-group \
#       --s3-location bucket=sin-webdeploy-artifact-bucket,key=webapp-pipeline/deploy-output.zip,bundleType=zip \
#       --deployment-config-name CodeDeployDefault.AllAtOnce \
#       --region ap-southeast-1

